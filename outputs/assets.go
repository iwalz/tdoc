// Code generated by go-bindata.
// sources:
// templates/file.svg
// templates/folder.svg
// templates/reset.css
// templates/styles.css
// templates/tdoc.html
// DO NOT EDIT!

package outputs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFileSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x55\x5d\x4f\xe3\x3a\x10\x7d\x47\xe2\x3f\xcc\xf5\x73\x3a\xf1\x57\xec\xf8\x8a\x5c\x24\x0a\xf7\xea\x4a\xcb\x2e\x82\xb2\xab\xe5\xad\x4b\xb3\x6d\x44\x37\x45\x34\xa2\xfc\xfc\x1d\xa7\x05\x9c\xd8\x6c\x1f\x9a\x33\x9e\x73\x3c\xe3\x63\x3b\x39\x39\x7d\xf9\xb5\x86\xe7\xfa\x69\xdb\x6c\xda\x8a\x09\xe4\x0c\xea\xf6\x7e\xb3\x68\xda\x65\xc5\x6e\x67\xff\x4e\x4a\x06\xdb\x6e\xde\x2e\xe6\xeb\x4d\x5b\x57\xac\xdd\xb0\xd3\x7f\x8e\x8f\x4e\xfe\x3a\xff\x32\x9d\x7d\xbf\xba\x80\xed\xf3\x12\xae\x6e\xcf\x3e\xfd\x3f\x05\x36\xc9\xf3\x6f\x6a\x9a\xe7\xe7\xb3\x73\xb8\xf9\xfa\x1f\x48\xce\x05\x77\x5c\xe7\xf9\xc5\x67\x76\x7c\x04\x83\x1f\x5b\x75\xdd\xe3\xdf\x79\xbe\xdb\xed\x70\xa7\x70\xf3\xb4\xcc\x67\xd7\xb9\x97\xe4\xd7\x17\xd3\x09\xe9\x27\x6f\x7a\x9a\x30\xa7\x42\x82\xe3\xa2\x5b\x30\xaa\x4f\x1d\xf8\xc2\xd4\x7c\xbb\xad\x12\x33\x91\x92\x7b\xc5\x6b\xd5\x5d\xb3\xe8\x56\x15\x53\x28\x54\x59\xba\xa6\x65\xb0\xaa\x9b\xe5\xaa\xab\x98\x46\x61\x8c\xb1\x34\x74\xa0\x3e\x37\xf5\xee\x6c\xf3\x52\x31\x0e\x1c\xa4\x34\xa0\x38\xf7\x25\x01\x4e\x1e\xe7\xdd\x0a\x9a\x45\xc5\x6e\xea\x75\x7d\xdf\x91\x65\xc1\xaa\x7e\x36\xeb\x75\xc5\x7e\xac\xe7\xf7\x0f\xde\xb2\xa7\xcd\x43\x3d\x0a\x27\x87\x2e\x44\xa0\xa2\xc9\x2e\x41\x70\x83\x9c\x67\x9c\xfe\x06\x2e\x4d\xc3\x0c\x08\xc7\x53\x78\xe4\x6b\xc8\x92\xc2\xa6\xf0\x48\x21\x85\x43\x55\xf8\x8c\xa4\xf5\x4a\x34\x22\x9b\x70\x14\x8e\x02\x8d\x9a\x67\x02\x4d\x24\x91\x06\x95\xcc\x14\x16\x5e\x52\xa0\x73\x99\x45\x6d\xfa\x71\x2a\x22\x52\x55\x82\xd4\x5b\x50\xd8\x28\xfa\x40\x36\x60\x4a\x13\x47\x69\xdd\x88\xe9\x44\x14\x45\x3a\x5a\x4d\x49\x39\x45\x9e\xf4\x4c\xe1\x28\x32\xe4\xca\xab\x1f\xd2\x95\xf4\x88\x74\x12\x75\x99\xd1\x59\x21\x63\xc8\xd2\x12\x0b\x4d\x4c\x47\xd6\x50\xd4\xd7\xf3\xb9\x84\xf9\x41\x0e\x0a\xfe\x41\x30\x52\x0d\x78\x83\x19\xfe\x50\x4a\x48\x74\xf6\x95\xa7\xb1\xd8\x77\xab\xa9\x3f\x54\xa2\x5f\x95\x2b\x47\x12\x3a\x07\xba\xa0\x94\x45\xa1\x81\x74\x9e\x46\xb3\x08\xe0\x7b\x03\x13\x55\x82\xcc\x1e\x97\x23\x98\xe2\x5b\x8b\xa5\xf3\xd5\x84\xcc\xac\x46\x67\x68\xd8\xd0\xb0\x4a\xac\x02\xad\xc9\x8c\x43\xeb\x40\x08\x54\x36\x2b\x1c\x0a\x01\x82\xee\x31\x61\x93\x10\xbc\x67\x40\x6b\xb4\x2a\xa3\xad\x1a\xe2\x91\x42\x97\x3e\x43\xf7\x45\x29\x30\xd4\x08\x19\x85\x9a\x60\xe1\x27\xe2\x68\xf5\x88\xff\x9e\x18\xde\xd7\x00\xdf\x0d\x24\x97\x60\xf7\xa7\x5a\xc7\x37\x3e\xc8\x1c\x70\xff\x1f\xe2\x51\x79\xdb\x9f\xd8\x92\xf6\x48\x81\xa5\xeb\x5b\x64\xa5\xdf\x4a\x30\xb2\xf7\xdc\xc5\x8a\x20\x03\x7d\xa5\x18\xc7\x26\x8e\x58\xb2\x34\xe3\x20\xa9\x39\xf0\xa4\x90\x1f\x45\xd1\x8d\x48\x30\xf7\x7e\x84\x41\x5a\x15\xfa\x16\xe3\xf1\x2e\x68\x72\x4e\x66\x3a\x3a\x65\xd3\x30\x43\x6f\xd4\xde\x79\x3d\xc2\xd1\x7b\xf7\x9d\xb5\xf7\x37\xc2\xc9\x5d\x08\x59\xfd\x7b\x29\xc4\x49\xc5\x9e\x15\x76\x18\xe2\x3b\x06\xb9\xff\x40\xfb\xaf\x1f\x3d\x7f\x07\x00\x00\xff\xff\x1d\x0b\x3d\x9d\xe1\x07\x00\x00")

func templatesFileSvgBytes() ([]byte, error) {
	return bindataRead(
		_templatesFileSvg,
		"templates/file.svg",
	)
}

func templatesFileSvg() (*asset, error) {
	bytes, err := templatesFileSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/file.svg", size: 2017, mode: os.FileMode(436), modTime: time.Unix(1486228833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFolderSvg = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x57\xdb\x4e\xf3\x46\x10\xbe\xff\xa5\xff\x1d\xb6\xbe\x4e\xec\x3d\x7b\x5d\x91\x22\x61\x68\x55\xa9\xb4\x08\x42\xab\x72\x97\x12\x37\xb1\x48\x1d\x44\x2c\xc2\xe3\x77\x7d\x48\x32\x3b\xb3\xce\x05\xcc\x97\xf9\x66\xe7\xe0\xd9\xc9\xf8\xea\xfa\xeb\xbf\x1d\xfb\xac\x3e\x0e\xf5\xbe\x59\x24\x22\xe5\x09\xab\x9a\xd7\xfd\xba\x6e\x36\x8b\xe4\x79\xf9\xf3\xdc\x25\xec\xd0\xae\x9a\xf5\x6a\xb7\x6f\xaa\x45\xd2\xec\x93\xeb\x9f\xbe\x7f\xbb\xfa\xe1\xf6\x8f\x72\xf9\xf7\xc3\x1d\x3b\x7c\x6e\xd8\xc3\xf3\xcd\x6f\xbf\x96\x2c\x99\x67\xd9\x5f\xaa\xcc\xb2\xdb\xe5\x2d\x7b\xfa\xf3\x17\x26\x39\x17\xbc\xe0\x3a\xcb\xee\x7e\x4f\xbe\x7f\x63\xc1\x27\xd9\xb6\xed\xfb\x8f\x59\x76\x3c\x1e\xd3\xa3\x4a\xf7\x1f\x9b\x6c\xf9\x98\x75\x26\xd9\xe3\x5d\x39\xf7\xf6\xf3\xb3\xbd\x3f\x30\xf3\x8e\x04\x4f\xd7\xed\x3a\xf1\xfe\x7d\x04\x9d\x63\x1f\x7c\x73\x58\x44\x4e\xf2\x96\xbc\xb3\x38\x79\x3d\xd6\xeb\x76\xbb\x48\x64\x6a\xfc\xc7\xd6\x4d\xc2\xb6\x55\xbd\xd9\xb6\x5d\xca\x6e\xfc\x6a\xa4\x7e\xd6\xd5\xf1\x66\xff\xb5\x48\x38\xe3\x4c\x2a\xce\x84\xcd\x3b\x97\x8c\x5d\xbd\xaf\xda\x2d\xab\xd7\x8b\xe4\xa9\xda\x55\xaf\xad\x2f\x19\xc8\xea\xdf\x7a\xb7\xeb\xea\xd3\x54\x5d\xc5\x3e\xf6\x6f\xbe\x5a\xff\xec\x56\xaf\x6f\x27\x38\x1f\x83\x50\xc0\xc8\x9f\x75\xcf\xa4\x34\x29\xe7\x33\x2d\xfd\xdf\xa0\x4a\x65\xa0\xf2\xc0\x07\xab\x66\xb9\xc5\x00\x95\x36\xe4\x89\x3c\x15\xf9\x4c\xc8\x9c\x20\x6c\x86\x98\xba\xf3\x2c\xac\x22\x88\xd8\x41\xa6\x13\x13\x00\x59\x05\x3c\x53\x4c\x00\x64\x14\xf0\xf4\xe8\x56\x63\x80\x8c\x02\x9e\x70\xe0\x04\x08\x90\x51\xc8\xb3\xa9\xf2\xc0\x68\x0c\xb0\x51\xc0\x53\xa9\xd3\x33\xa1\x04\x06\xd8\x08\xf2\x5c\xf7\x04\x1c\x12\x71\xe5\x2e\x1c\x7d\x69\x0e\x1d\x6f\x21\x06\x39\xa8\x9b\x00\x78\x09\x8c\xee\x99\x10\xaa\x57\xd2\x8e\x04\x1a\x2f\xf7\x87\x4b\x8e\x01\x4e\x11\xf2\x24\x97\x71\x80\xdb\x2a\xc2\x53\x16\x83\xb8\xd1\xc8\x73\x51\x19\x9b\x10\x96\x0e\xc5\x28\x7f\xcc\x5f\x45\x65\x5a\xcd\xde\x86\x24\x59\x42\x8d\x97\x87\xee\x36\x18\x90\x6a\x02\x9e\xe4\x79\x1c\x90\xc2\x0c\xaa\x22\x75\x1d\xcf\xa4\x85\x98\x29\x5f\x2b\xe7\x41\x91\x1a\x0f\x4c\x2a\x2d\xb9\xd9\x7e\x60\xda\x99\xca\xd3\xc2\xf6\xfd\x32\x00\xde\xcf\xc5\xbe\x6a\xb1\x31\x02\x54\xde\xc8\xf6\xdd\x4a\x00\x19\x59\x90\x37\x26\x68\x29\x22\x01\x42\xa6\x90\x13\x00\x17\x10\xf2\x54\x37\x2a\x5d\x11\x8a\xc8\x00\x70\x40\x6e\x93\x15\x08\xf2\x8f\xca\x24\x7b\xcc\xe2\xa1\x18\xe5\x8f\x4d\xe3\xa2\x32\x6e\x41\x39\xdc\x40\xe2\xbc\x84\x1a\x36\x8c\x04\x55\x20\x19\xbb\x27\x2c\x11\x8a\x51\xfe\xc0\x81\xce\x80\x4c\xc2\xed\xbb\x95\xcc\xe5\x12\x28\x4e\x62\x8e\x64\xec\x1c\xb2\xb8\x8a\x03\x72\x59\x28\x4f\x14\x18\xc4\x8d\x06\x9e\x10\x26\x0e\xc8\x5d\x0e\x78\xfa\x9c\x1c\x90\xe3\xc3\x14\x96\x00\x89\xa4\x98\x7c\xe2\x51\x96\x81\xaa\x9f\x04\x1d\x70\x18\x90\x4c\x03\x9e\xed\x81\xc6\x80\x18\x05\xbc\xc0\x2d\x00\x38\xf6\x61\xa8\x92\xa6\x2a\x81\x82\xd9\xcb\xb6\x63\xa7\x76\x22\xc0\x11\xc3\x24\x1c\xf7\x01\x00\x70\xa1\x21\x4f\x8f\xeb\x8a\xc1\x00\xff\xda\x42\x9e\x71\xe0\x04\x08\xf0\x5a\x03\x79\x4e\x4e\x00\xbc\x06\x40\x9e\x1c\xfb\x28\x82\xc8\xc8\x0c\x98\xd2\x5e\xea\x08\x41\x64\x3e\x9f\x79\x2a\x2a\x92\xae\x1b\x7e\x28\x4d\xec\x12\x03\xd5\x09\x68\x8b\x01\x09\x81\xf2\x82\x13\x4c\xbc\xf9\x87\x8b\x41\x77\xbc\x32\x50\x9d\x80\xc9\x31\x20\x61\x50\x5e\x70\x82\x8d\x86\xd1\x17\x8a\x3e\x8f\x12\x28\x86\x4d\x6d\xec\xb0\xb3\x18\xdb\xe6\x20\x47\x87\x62\x94\xae\xcf\x8f\x8a\x88\xb4\x5c\xfd\x83\xce\x23\x91\x42\xd5\x09\x58\x87\x41\xbc\x71\x02\x5e\x70\x42\x3e\x11\x46\xdf\xa5\x2e\x1a\xc6\x45\x75\x02\x79\x81\x01\x09\x83\xf2\x82\x13\x5c\x7c\x71\xb3\xc3\x5d\x21\xed\x58\x06\x2a\x36\xbe\x01\x19\x83\x01\xdd\x3c\xfc\xaa\x25\xfc\x7d\x77\xfd\x86\x92\x8b\xfe\x15\x43\xba\xf0\xb8\x97\x84\x65\xdd\x4b\x76\xf7\x06\xeb\xff\xff\x1f\x00\x00\xff\xff\x32\x18\xcd\xe9\xa5\x0f\x00\x00")

func templatesFolderSvgBytes() ([]byte, error) {
	return bindataRead(
		_templatesFolderSvg,
		"templates/folder.svg",
	)
}

func templatesFolderSvg() (*asset, error) {
	bytes, err := templatesFolderSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/folder.svg", size: 4005, mode: os.FileMode(436), modTime: time.Unix(1486228831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResetCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\xdd\x6e\xdb\x3c\x0c\xbd\xfe\x0a\xf4\x1d\x74\xf3\xa1\x40\xe1\xa0\xcd\xfe\x2e\xdc\xcb\xa1\x2f\xb0\xec\x05\x28\x8b\xb6\xb9\xc8\x92\x23\xc9\x01\xb2\x61\xef\xbe\x43\x39\x49\x33\xac\x40\x64\x89\xe2\x11\x79\x0e\xc9\x3c\x3d\x9a\xaf\xbb\x9d\xf9\xf6\xba\x7b\xfd\x6e\x1e\x9f\xee\xef\xc6\x32\xf9\xc6\xd8\xe8\x4e\x8d\x71\x72\x6c\x4c\x9e\x29\x34\x86\xe6\xd9\x73\x69\x4c\xb4\x3f\xb8\xc3\x2e\x7d\xa2\x89\x1b\xe0\xb7\x8d\x19\x3f\x60\x7d\xc4\xfa\x84\xf5\x19\xeb\x4b\x63\x66\x04\xf1\xb1\xdb\x1f\x96\x58\x18\x66\x52\x30\x21\x90\xb5\x09\xdf\x2e\xc5\x70\x9a\x70\x70\x2e\x71\xce\x00\xcb\xd0\x98\x4e\x14\xdb\x45\xa7\x60\xc7\x20\xe2\x7a\x24\x67\x00\x65\x82\x5f\x02\x90\x7b\xeb\x1a\x73\x00\x31\xfc\x68\x9a\x81\xcc\x13\x79\x60\x73\x49\xb2\xe7\xba\xc7\x00\x74\x5e\xac\x7e\xc0\xa4\x80\xf1\x91\x12\xa0\xb8\x59\x10\x07\x49\x38\x14\xd6\x1b\xa7\x59\xe0\x77\x88\x1a\x71\x5e\xb0\xbc\xc0\xd1\x0b\x7b\x97\x55\x74\x1f\x13\x18\x78\xb2\xca\xc8\xf3\xc0\xc1\xc1\x5f\xc8\x7a\x65\x4b\x73\x91\x08\x96\x65\x2d\x5a\xe9\x63\xc4\x9b\x32\x32\x21\x62\x49\x7a\xc4\xd2\x17\x94\x8a\x74\xfa\x86\xb2\xb8\xfa\x34\x1c\x09\x32\x1c\x17\x12\x9f\x55\xa8\x65\x57\x53\x0f\x0b\x0a\x66\xb0\x5f\xc3\x6b\x58\x10\x36\x1a\xb7\xee\x43\x8a\x8b\xaa\x9f\x38\x40\x52\x20\xf4\x2a\x2e\x65\x5e\x90\x3c\x2d\x16\x4c\x32\x3a\x55\x9f\xe6\x65\x9a\x28\x9d\x94\xb3\xa0\x69\x06\xc6\x1e\x24\x16\x27\x11\x75\x01\x95\x68\x7e\xdd\xdf\xfd\x87\xeb\x41\x42\x6b\x9e\x5f\x60\xcc\xe8\x8c\x84\xe1\x6c\xd9\x98\x90\xf4\x6c\xf4\x31\x94\x4d\x96\x9f\xdc\x9a\xed\xf3\xf3\xff\x97\xab\x16\xed\x19\x39\x49\xd1\x8b\x23\xab\x56\xf2\x1b\xf2\x32\x20\xa6\xa5\xcc\x5e\x02\xc3\xf7\xfb\xdf\x42\x5c\x0b\xf0\x97\xe0\xb5\x08\xa8\xc6\xfb\xca\xcd\x8d\xf0\xb3\xd4\x2a\xc3\x49\x9e\x3d\x9d\xda\x75\xfe\xd6\x84\xda\x9a\xea\x54\x0e\x9b\x91\x65\x18\xc1\x77\xbb\x3a\xd7\xae\x9f\xdd\x19\xd2\xca\xc9\x43\x5b\x88\x17\xba\xb7\x83\x7c\xa8\xb8\x6a\xe4\xf7\x31\xad\x65\x0c\x0c\xdf\xce\x7f\x4b\xfd\x3a\x6c\x87\xab\xf3\xb0\xde\xd5\x68\x1d\xaa\xc7\x5a\xc0\x87\x87\x97\x5b\xf3\x2d\x7a\x9d\xb5\x8a\x5d\x3b\xb1\xe9\xa2\xf7\x34\x67\xd0\xbc\x9c\xde\xda\xb4\xc1\x5f\xb6\xbb\xf6\x0e\xaf\xff\x04\x00\x00\xff\xff\x3a\x24\x0d\xbe\xe5\x03\x00\x00")

func templatesResetCssBytes() ([]byte, error) {
	return bindataRead(
		_templatesResetCss,
		"templates/reset.css",
	)
}

func templatesResetCss() (*asset, error) {
	bytes, err := templatesResetCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reset.css", size: 997, mode: os.FileMode(436), modTime: time.Unix(1486228826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStylesCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xed\x8a\xdb\x30\x10\xfc\xdd\x40\xde\x61\xc1\x1c\xb4\x10\x05\xe7\x7c\x09\xc4\x85\xbe\x8b\x4e\x5a\xdb\xa2\xb2\x65\x24\x5d\xea\xb4\xf4\xdd\xbb\xb2\xac\xf8\xe3\xf2\xa3\xdc\x0f\xeb\x56\x33\xa3\x9d\xd9\x4d\x66\x8d\xf1\x7f\xf6\x3b\x00\xa9\x5c\xaf\xf9\xbd\x84\x4a\xe3\xf0\x3d\x54\x2a\xd3\x79\x56\xf1\x56\x69\xaa\x8a\x0f\xeb\xd4\x0d\xe9\xe2\xef\x7e\xb7\xdf\x65\xef\xc6\x4a\xb4\x30\x52\x03\xa3\x84\xd3\x48\x8a\x75\x66\x55\xdd\x78\xaa\xf5\x03\x38\xa3\x95\x84\xac\x28\x8a\x11\xd0\x72\x5b\xab\x8e\x69\xac\xc2\x7d\xde\x0f\x4b\xda\x54\x25\x96\xe4\xae\xc1\x05\xed\x9d\x8b\x9f\xb5\x35\x1f\x9d\x64\xc2\x68\x63\x4b\xc8\xb0\x0a\x7f\xdb\x5b\xd5\xf2\x1a\x4b\xb0\x5c\x2a\xae\x59\x1d\xbe\xd8\xf9\xaf\x42\x59\xa1\x11\x84\x36\x0e\x9d\x67\x4e\x49\x3c\x4c\x0a\x70\xc9\x5f\x0e\x90\x09\x21\xe0\x1c\x0e\xb1\xfa\x6d\x2b\x6c\xb1\x47\x4e\xdd\xc5\x2f\xbb\x6f\xef\x9d\xfa\x4d\xef\xbe\x91\x23\x28\xf2\xe8\x2b\x46\xd5\x53\x43\x1d\x6f\x71\x0a\x2b\xa4\x1a\xb1\x45\x72\xaf\x55\x87\xac\xc1\x29\xb3\xd7\x54\xf6\x38\x78\xc6\xb5\xaa\x3b\xca\x9f\x4c\xa0\x7d\x68\x36\xc8\x1f\xf1\xcf\x3d\xac\x43\xd9\x0a\x12\x33\x13\xf4\x3a\x29\x6d\x89\x29\xb5\xd0\x08\xb7\x73\x6a\xde\xd0\x64\xbc\x37\xed\x61\x9c\x04\xbc\xce\xf9\xc0\x69\x71\xbe\x5e\x5f\x26\xc4\xf6\xb4\x02\xcc\xc9\x7e\x79\x1e\xdc\x5b\xb2\x0e\x69\xab\xce\xe1\xdf\x96\x16\xe6\xe1\x26\xcf\x6f\x4d\x74\x73\xd4\xca\x4d\x56\xd6\x5b\x75\x4e\x7e\x8f\x64\xc2\xde\x13\x64\x78\x88\x14\x97\xe9\x9d\x4f\x85\x9e\x4b\xa9\xba\x9a\x79\xd3\x53\x4f\x6b\x9d\xb2\x31\xb7\x67\xa1\xff\x6a\x94\xc7\x25\xf0\x58\x19\x1d\xc6\xf3\x03\x78\x44\x8f\x93\x94\x28\x8c\xe5\x5e\x19\x1a\x27\xf1\xd0\x86\xb4\x57\x7d\xf2\x4f\x2b\x72\xba\x2c\x77\x61\xa9\xd0\x99\x91\x0c\x90\x7e\x0e\x79\x9e\x47\x07\xc6\xa9\x08\xb1\xa8\x09\x7c\x8b\xb0\xd1\x10\xbb\x4e\x72\xab\xbc\xce\xf3\xb2\xa6\x46\xfe\xc3\xea\xbf\x00\x00\x00\xff\xff\x32\x16\xf5\xba\x3b\x04\x00\x00")

func templatesStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_templatesStylesCss,
		"templates/styles.css",
	)
}

func templatesStylesCss() (*asset, error) {
	bytes, err := templatesStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/styles.css", size: 1083, mode: os.FileMode(436), modTime: time.Unix(1486504739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTdocHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\xb1\x6e\xdb\x30\x10\x9d\x5d\xa0\xff\x70\xbd\xce\x35\x81\x76\xe9\x40\x6a\x68\xe3\x20\x43\x82\x64\xf0\x92\x91\x16\xcf\x12\x11\x4a\x34\xc8\xb3\x13\xc5\xf0\xbf\x87\x16\x65\x39\x08\x90\xc1\x41\xbc\x45\x8b\x1e\x8e\xef\x1e\xdf\x3d\xe1\x24\x7f\x5c\xdc\xfe\x9f\xdf\xdf\xcd\xe0\x6a\x7e\x73\x5d\x7c\xff\x26\x6b\x6e\x5c\x7a\x03\xc8\x9a\xb4\xe9\x51\xc2\x0d\xb1\x86\xb2\xd6\x21\x12\x2b\x5c\xf3\xf2\xd7\x5f\x4c\x67\x93\x89\x74\xb6\x7d\x80\x40\x4e\x61\xe4\xce\x51\xac\x89\x18\x81\xbb\x15\x29\x64\x7a\x62\x51\xc6\x88\x50\x07\x5a\x2a\x14\x81\x52\xff\xb4\xaf\x34\x64\xac\x4e\x4d\x65\x20\x6a\x11\xc4\x07\xd4\x32\xe5\x5d\xb9\xde\x38\x5b\x76\x54\xb0\xf1\xa5\x14\x19\xf7\xb3\x89\x71\x38\xb9\xf0\xa6\xcb\x97\x1b\xbb\x01\x6b\x14\x06\xef\x39\x4f\x77\xac\x2d\x7c\x30\x14\x86\xea\xb1\xbc\xd2\x15\xb5\xba\x21\x1c\xae\x48\xf5\xa1\xf1\x15\x3c\x90\x4b\xdf\x32\xb5\x3c\x8a\xec\x3d\x50\xe8\x8f\x32\xc4\x22\x1b\xa3\x70\xa0\xac\x1d\x94\x4e\xc7\xa8\xd0\xd9\xd8\x77\xc2\xf8\x6c\xb7\x30\x85\xdd\x2e\x33\xf7\xd1\x1d\xa8\xe9\x8e\xd0\x25\x2d\xdb\x54\x10\x43\xa9\x70\x69\x1d\x4d\xe3\xa6\x42\x78\xb4\x86\x6b\x85\x7f\x7e\xa7\x10\xc9\x56\x35\x67\x2c\x0a\xa9\x87\x54\x7f\x62\x71\xe9\xbd\x14\x3a\x79\x71\xb6\xf8\x7c\xf5\x7f\x3a\x9c\xa4\xee\x5d\xca\xe3\x24\xfd\xe7\x33\xba\x9f\xa5\x4f\x78\x46\xf9\xaf\xe8\x4f\x8a\x5e\x8a\xb5\x7b\xbb\x6f\x23\x92\x62\x58\xed\xb4\x54\xf9\xa7\xf6\x12\x00\x00\xff\xff\x4f\xbc\xaf\xdb\xee\x04\x00\x00")

func templatesTdocHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTdocHtml,
		"templates/tdoc.html",
	)
}

func templatesTdocHtml() (*asset, error) {
	bytes, err := templatesTdocHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tdoc.html", size: 1262, mode: os.FileMode(436), modTime: time.Unix(1486504894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/file.svg": templatesFileSvg,
	"templates/folder.svg": templatesFolderSvg,
	"templates/reset.css": templatesResetCss,
	"templates/styles.css": templatesStylesCss,
	"templates/tdoc.html": templatesTdocHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"file.svg": &bintree{templatesFileSvg, map[string]*bintree{}},
		"folder.svg": &bintree{templatesFolderSvg, map[string]*bintree{}},
		"reset.css": &bintree{templatesResetCss, map[string]*bintree{}},
		"styles.css": &bintree{templatesStylesCss, map[string]*bintree{}},
		"tdoc.html": &bintree{templatesTdocHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

